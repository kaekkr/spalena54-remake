generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  phone         String?
  role          UserRole  @default(CUSTOMER)
  emailVerified Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  addresses     Address[]
  cart          Cart?
  orders        Order[]
  reviews       Review[]
}

model Address {
  id            String    @id @default(cuid())
  userId        String
  street        String
  city          String
  postalCode    String
  country       String    @default("CZ")
  isDefault     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders        Order[]
}

model Product {
  id            String    @id @default(cuid())
  sku           String    @unique
  title         String
  author        String?
  description   String?
  price         Float
  salePrice     Float?
  category      Category  @relation(fields: [categoryId], references: [id])
  categoryId    String
  type          ProductType
  condition     Condition?
  stock         Int       @default(0)
  images        String[]
  isbn          String?
  year          Int?
  publisher     String?
  language      String    @default("cs")
  pages         Int?
  weight        Float?    // in grams, for delivery calculation
  featured      Boolean   @default(false)
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  cartItems     CartItem[]
  orderItems    OrderItem[]
  reviews       Review[]
}

model Category {
  id            String    @id @default(cuid())
  name          String
  slug          String    @unique
  description   String?
  parentId      String?
  parent        Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children      Category[] @relation("CategoryHierarchy")
  products      Product[]
  createdAt     DateTime  @default(now())
}

model Cart {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items         CartItem[]
  updatedAt     DateTime  @updatedAt
}

model CartItem {
  id            String    @id @default(cuid())
  cartId        String
  productId     String
  quantity      Int       @default(1)
  
  cart          Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product       Product   @relation(fields: [productId], references: [id])
  
  @@unique([cartId, productId])
}

model Order {
  id            String    @id @default(cuid())
  orderNumber   String    @unique
  userId        String
  addressId     String
  status        OrderStatus @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod PaymentMethod
  deliveryMethod DeliveryMethod
  deliveryPrice Float
  deliveryTrackingNumber String?
  subtotal      Float
  total         Float
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  user          User      @relation(fields: [userId], references: [id])
  address       Address   @relation(fields: [addressId], references: [id])
  items         OrderItem[]
  payment       Payment?
}

model OrderItem {
  id            String    @id @default(cuid())
  orderId       String
  productId     String
  quantity      Int
  price         Float     // Price at time of purchase
  
  order         Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product       Product   @relation(fields: [productId], references: [id])
}

model Payment {
  id            String    @id @default(cuid())
  orderId       String    @unique
  transactionId String?   @unique
  amount        Float
  currency      String    @default("CZK")
  status        PaymentStatus
  method        PaymentMethod
  metadata      Json?
  createdAt     DateTime  @default(now())
  
  order         Order     @relation(fields: [orderId], references: [id])
}

model Review {
  id            String    @id @default(cuid())
  userId        String
  productId     String
  rating        Int       // 1-5
  comment       String?
  createdAt     DateTime  @default(now())
  
  user          User      @relation(fields: [userId], references: [id])
  product       Product   @relation(fields: [productId], references: [id])
  
  @@unique([userId, productId])
}

enum UserRole {
  CUSTOMER
  ADMIN
  EMPLOYEE
}

enum ProductType {
  BOOK
  VINYL
  CD
  POSTER
  MAP
  OTHER
}

enum Condition {
  NEW
  LIKE_NEW
  GOOD
  ACCEPTABLE
  COLLECTIBLE
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CARD
  BANK_TRANSFER
  CASH_ON_DELIVERY
  PAYPAL
}

enum DeliveryMethod {
  PERSONAL_PICKUP
  CZECH_POST
  PPL
  DPD
  ZASILKOVNA
}